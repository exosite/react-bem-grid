// ////////////////////////////////////////////////////// //
// BEM Sass port of Flexbox Grid - http://flexboxgrid.com //
// ////////////////////////////////////////////////////// //

// Variables
$columns: 12;

$gutter: 2rem;

$breakpoints: (
  xs: false,
  sm: 48em,
  md: 62em,
  lg: 75em
);

$containers: (
  xs: false,
  sm: 46rem,
  md: 61rem,
  lg: 71rem,
);

// Mixins
@mixin breakpoint($breakpoint, $breakpoint-size) {
  // The grid is mobile first so xs is the default, hence no breakpoint
  @if $breakpoint == xs {
    @content;
  }

  // Add breakpoints for larger screens
  @else {
    @media only screen and (min-width: $breakpoint-size) {
      // Static grid
      .grid {
        width: map-get($containers, $breakpoint);
      }

      @content;
    }
  }
}

// Fluid grid
.grid {
  &--fluid {
    margin-right: auto;
    margin-left: auto;
    padding-right: $gutter;
    padding-left: $gutter;
  }
}

// Rows
.grid__row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: ($gutter / -2);
  margin-left: ($gutter / -2);

  &--reverse {
    flex-direction: row-reverse;
  }
}

// Columns
.grid__col {
  &--reverse {
    flex-direction: column-reverse;
  }
}

@each $breakpoint, $breakpoint-size in $breakpoints {
  @include breakpoint($breakpoint, $breakpoint-size) {
    $col-selectors: (".grid__col--#{$breakpoint}");

    @for $col from 1 through $columns {
      $col-selector: unquote(".grid__col--#{$breakpoint}-#{$col}");
      $col-selectors: append($col-selectors, $col-selector, comma);
    }

    @for $col from 1 through $columns {
      $col-offset-selector: unquote(".grid__col--#{$breakpoint}-offset-#{$col}");
      $col-selectors: append($col-selectors, $col-offset-selector, comma);
    }

    #{$col-selectors} {
      box-sizing: border-box;
      flex: 0 0 auto;
      padding-right: ($gutter / 2);
      padding-left: ($gutter / 2);
    }

    .grid__col {
      &--#{$breakpoint} {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;

        @for $col from 1 through $columns {
          &-#{$col} {
            flex-basis: (100% / $columns) * $col;
            max-width: (100% / $columns) * $col;
          }
        }

        @for $col from 1 through $columns {
          &-offset-#{$col} {
            margin-left: (100% / $columns) * $col;
          }
        }
      }
    }

    // Utilities
    .grid {
      &__row {
        &--#{$breakpoint}-start {
          justify-content: flex-start;
          text-align: start;
        }

        &--#{$breakpoint}-center {
          justify-content: center;
          text-align: center;
        }

        &--#{$breakpoint}-end {
          justify-content: flex-end;
          text-align: end;
        }

        &--#{$breakpoint}-top {
          align-items: flex-start;
        }

        &--#{$breakpoint}-middle {
          align-items: center;
        }

        &--#{$breakpoint}-bottom {
          align-items: flex-end;
        }

        &--#{$breakpoint}-around {
          justify-content: space-around;
        }

        &--#{$breakpoint}-between {
          justify-content: space-between;
        }
      }

      &__col {
        &--#{$breakpoint}-first {
          order: -1;
        }

        &--#{$breakpoint}-last {
          order: 1;
        }
      }
    }
  }
}
